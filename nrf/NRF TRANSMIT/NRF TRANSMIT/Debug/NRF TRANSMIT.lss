
NRF TRANSMIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000001f8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c0a  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072f  00000000  00000000  00000f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000073d  00000000  00000000  0000168d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000138  00000000  00000000  00001dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000472  00000000  00000000  00001f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000062e  00000000  00000000  00002376  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000029a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  7a:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z3spiv>:

void flush_Rx(void)
{
	PORTB&=~(1<<PB4);
	spi_transceiver(FLUSH_RX);
	PORTB|=(1<<PB4);
  82:	87 b3       	in	r24, 0x17	; 23
  84:	82 6b       	ori	r24, 0xB2	; 178
  86:	87 bb       	out	0x17, r24	; 23
  88:	be 98       	cbi	0x17, 6	; 23
  8a:	8d b1       	in	r24, 0x0d	; 13
  8c:	81 65       	ori	r24, 0x51	; 81
  8e:	8d b9       	out	0x0d, r24	; 13
  90:	bc 9a       	sbi	0x17, 4	; 23
  92:	c1 98       	cbi	0x18, 1	; 24
  94:	08 95       	ret

00000096 <_Z15spi_transceiverh>:
  96:	8f b9       	out	0x0f, r24	; 15
  98:	77 9b       	sbis	0x0e, 7	; 14
  9a:	fe cf       	rjmp	.-4      	; 0x98 <_Z15spi_transceiverh+0x2>
  9c:	8f b1       	in	r24, 0x0f	; 15
  9e:	08 95       	ret

000000a0 <_Z8writenrfhh>:
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	d6 2f       	mov	r29, r22
  a6:	c4 98       	cbi	0x18, 4	; 24
  a8:	8f 71       	andi	r24, 0x1F	; 31
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
  b0:	c8 2f       	mov	r28, r24
  b2:	8d 2f       	mov	r24, r29
  b4:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
  b8:	c4 9a       	sbi	0x18, 4	; 24
  ba:	8c 2f       	mov	r24, r28
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <_Z8flush_txv>:
  c2:	c4 98       	cbi	0x18, 4	; 24
  c4:	81 ee       	ldi	r24, 0xE1	; 225
  c6:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
  ca:	c4 9a       	sbi	0x18, 4	; 24
  cc:	08 95       	ret

000000ce <_Z12nrf24l01_intv>:



void nrf24l01_int(void)
{
	writenrf(EN_AA,0x01);
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 50 00 	call	0xa0	; 0xa0 <_Z8writenrfhh>
	writenrf(EN_RXADDR,0x01);
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	0e 94 50 00 	call	0xa0	; 0xa0 <_Z8writenrfhh>
	writenrf(SETUP_AW,0x03);
  de:	63 e0       	ldi	r22, 0x03	; 3
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	0e 94 50 00 	call	0xa0	; 0xa0 <_Z8writenrfhh>
	writenrf(RF_CH,0x78);
  e6:	68 e7       	ldi	r22, 0x78	; 120
  e8:	85 e0       	ldi	r24, 0x05	; 5
  ea:	0e 94 50 00 	call	0xa0	; 0xa0 <_Z8writenrfhh>
	writenrf(RF_SETUP,0x26); 
  ee:	66 e2       	ldi	r22, 0x26	; 38
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	0e 94 50 00 	call	0xa0	; 0xa0 <_Z8writenrfhh>
	writenrf(FEATURE,0x00);
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	8d e1       	ldi	r24, 0x1D	; 29
  fa:	0e 94 50 00 	call	0xa0	; 0xa0 <_Z8writenrfhh>
	
	PORTB&=~(1<<PB4);
  fe:	c4 98       	cbi	0x18, 4	; 24
	spi_transceiver(W_REGISTER+RX_ADDR_P0);
 100:	8a e2       	ldi	r24, 0x2A	; 42
 102:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
	spi_transceiver(0X01);
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
	spi_transceiver(0x01);	
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
	spi_transceiver(0x01);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
	spi_transceiver(0x01);
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
    spi_transceiver(0x01);
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
	PORTB|=(1<<PB4);
 124:	c4 9a       	sbi	0x18, 4	; 24
	
	
	PORTB&=~(1<<PB4);
 126:	c4 98       	cbi	0x18, 4	; 24
	spi_transceiver(W_REGISTER+TX_ADDR);
 128:	80 e3       	ldi	r24, 0x30	; 48
 12a:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
	spi_transceiver(0x01);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
	spi_transceiver(0x01);
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
	spi_transceiver(0x01);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
	spi_transceiver(0x01);
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
	spi_transceiver(0x01);
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
	PORTB|=(1<<PB4);
 14c:	c4 9a       	sbi	0x18, 4	; 24
	

	writenrf(CONFIG,0x7E);
 14e:	6e e7       	ldi	r22, 0x7E	; 126
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 50 00 	call	0xa0	; 0xa0 <_Z8writenrfhh>
	writenrf(SETUP_RETR,0x14);
 156:	64 e1       	ldi	r22, 0x14	; 20
 158:	84 e0       	ldi	r24, 0x04	; 4
 15a:	0e 94 50 00 	call	0xa0	; 0xa0 <_Z8writenrfhh>
	writenrf(STATUS,0x7E);
 15e:	6e e7       	ldi	r22, 0x7E	; 126
 160:	87 e0       	ldi	r24, 0x07	; 7
 162:	0e 94 50 00 	call	0xa0	; 0xa0 <_Z8writenrfhh>
 166:	08 95       	ret

00000168 <_Z8transmitjj>:
   	
}


void transmit( uint16_t x,uint16_t y) // transmits two 16 bit values
{  uint8_t d1, d2, d3, d4;
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	08 2f       	mov	r16, r24
 172:	19 2f       	mov	r17, r25
 174:	d6 2f       	mov	r29, r22
 176:	c7 2f       	mov	r28, r23
	d2=x>>8;
	
	d3=y;
	d4=y>>8;
	
	PORTB&=~(1<<PB4);
 178:	c4 98       	cbi	0x18, 4	; 24
	spi_transceiver(W_TX_PAYLOAD);
 17a:	80 ea       	ldi	r24, 0xA0	; 160
 17c:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
	spi_transceiver(d1);
 180:	80 2f       	mov	r24, r16
 182:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
	spi_transceiver(d2);
 186:	81 2f       	mov	r24, r17
 188:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
	spi_transceiver(d3);
 18c:	8d 2f       	mov	r24, r29
 18e:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
	spi_transceiver(d4);
 192:	8c 2f       	mov	r24, r28
 194:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15spi_transceiverh>
	PORTB|=(1<<PB4);
 198:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	87 e8       	ldi	r24, 0x87	; 135
 19c:	93 e1       	ldi	r25, 0x13	; 19
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <_Z8transmitjj+0x36>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <_Z8transmitjj+0x3c>
 1a4:	00 00       	nop
	
    _delay_ms(20);	
	flush_tx();
 1a6:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z8flush_txv>
	
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret

000001b4 <main>:

 
int main(void)
{   sei();
 1b4:	78 94       	sei
	UCSRC &=~(1<<URSEL);
 1b6:	80 b5       	in	r24, 0x20	; 32
 1b8:	8f 77       	andi	r24, 0x7F	; 127
 1ba:	80 bd       	out	0x20, r24	; 32
	unsigned int  h = 51;
	UBRRH=(unsigned char)(h>>8);
 1bc:	10 bc       	out	0x20, r1	; 32
	UBRRL=(unsigned char)h;
 1be:	83 e3       	ldi	r24, 0x33	; 51
 1c0:	89 b9       	out	0x09, r24	; 9
	
	UCSRC |=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 1c2:	80 b5       	in	r24, 0x20	; 32
 1c4:	86 68       	ori	r24, 0x86	; 134
 1c6:	80 bd       	out	0x20, r24	; 32
	UCSRB &=~(1<<UCSZ2);
 1c8:	52 98       	cbi	0x0a, 2	; 10
	UCSRC &=~(1<<UMSEL)& ~(1<<UPM1)& ~(1<<UPM0)&~(1<<USBS);
 1ca:	80 b5       	in	r24, 0x20	; 32
 1cc:	87 78       	andi	r24, 0x87	; 135
 1ce:	80 bd       	out	0x20, r24	; 32
	UCSRB |=(1<<TXEN);
 1d0:	53 9a       	sbi	0x0a, 3	; 10

		
	spi();
 1d2:	0e 94 41 00 	call	0x82	; 0x82 <_Z3spiv>
	DDRD|=(1<<PD7);
 1d6:	8f 9a       	sbi	0x11, 7	; 17
	
     while (1) 
     {PORTB |=(1<<PB1);
 1d8:	c1 9a       	sbi	0x18, 1	; 24
	  nrf24l01_int();
 1da:	0e 94 67 00 	call	0xce	; 0xce <_Z12nrf24l01_intv>
	  transmit(x,y); 
 1de:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
 1e2:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__data_start+0x1>
 1e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <x>
 1ea:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <x+0x1>
 1ee:	0e 94 b4 00 	call	0x168	; 0x168 <_Z8transmitjj>
 1f2:	f2 cf       	rjmp	.-28     	; 0x1d8 <main+0x24>

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
