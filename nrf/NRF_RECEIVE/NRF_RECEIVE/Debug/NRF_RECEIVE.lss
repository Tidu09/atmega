
NRF_RECEIVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000046e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000046e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cb5  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000722  00000000  00000000  00001209  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000785  00000000  00000000  0000192b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  000020b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000474  00000000  00000000  000021e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c6  00000000  00000000  0000265c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002d22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	cb 00       	.word	0x00cb	; ????
  56:	cf 00       	.word	0x00cf	; ????
  58:	d3 00       	.word	0x00d3	; ????
  5a:	d7 00       	.word	0x00d7	; ????
  5c:	db 00       	.word	0x00db	; ????
  5e:	df 00       	.word	0x00df	; ????
  60:	e3 00       	.word	0x00e3	; ????
  62:	e7 00       	.word	0x00e7	; ????
  64:	eb 00       	.word	0x00eb	; ????
  66:	ef 00       	.word	0x00ef	; ????

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 36       	cpi	r26, 0x64	; 100
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a1 01 	call	0x342	; 0x342 <main>
  88:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z3spiv>:

void flush_tx(void)
{
	PORTB&=~(1<<PB4);
	spi_transceiver(FLUSH_TX);
	PORTB|=(1<<PB4);
  90:	87 b3       	in	r24, 0x17	; 23
  92:	82 6b       	ori	r24, 0xB2	; 178
  94:	87 bb       	out	0x17, r24	; 23
  96:	be 98       	cbi	0x17, 6	; 23
  98:	8d b1       	in	r24, 0x0d	; 13
  9a:	81 65       	ori	r24, 0x51	; 81
  9c:	8d b9       	out	0x0d, r24	; 13
  9e:	c1 98       	cbi	0x18, 1	; 24
  a0:	08 95       	ret

000000a2 <_Z15spi_transceiverh>:
  a2:	8f b9       	out	0x0f, r24	; 15
  a4:	77 9b       	sbis	0x0e, 7	; 14
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <_Z15spi_transceiverh+0x2>
  a8:	8f b1       	in	r24, 0x0f	; 15
  aa:	08 95       	ret

000000ac <_Z8writenrfhh>:
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	d6 2f       	mov	r29, r22
  b2:	c4 98       	cbi	0x18, 4	; 24
  b4:	8f 71       	andi	r24, 0x1F	; 31
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
  bc:	c8 2f       	mov	r28, r24
  be:	8d 2f       	mov	r24, r29
  c0:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
  c4:	c4 9a       	sbi	0x18, 4	; 24
  c6:	8c 2f       	mov	r24, r28
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <_Z7sendintic>:
  ce:	8f 92       	push	r8
  d0:	9f 92       	push	r9
  d2:	af 92       	push	r10
  d4:	bf 92       	push	r11
  d6:	cf 92       	push	r12
  d8:	df 92       	push	r13
  da:	ef 92       	push	r14
  dc:	ff 92       	push	r15
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	5d 9b       	sbis	0x0b, 5	; 11
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <_Z7sendintic+0x18>
  ea:	6c b9       	out	0x0c, r22	; 12
  ec:	18 16       	cp	r1, r24
  ee:	19 06       	cpc	r1, r25
  f0:	0c f0       	brlt	.+2      	; 0xf4 <_Z7sendintic+0x26>
  f2:	7f c0       	rjmp	.+254    	; 0x1f2 <_Z7sendintic+0x124>
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	ea e0       	ldi	r30, 0x0A	; 10
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	28 c0       	rjmp	.+80     	; 0x150 <_Z7sendintic+0x82>
 100:	44 23       	and	r20, r20
 102:	09 f4       	brne	.+2      	; 0x106 <_Z7sendintic+0x38>
 104:	76 c0       	rjmp	.+236    	; 0x1f2 <_Z7sendintic+0x124>
 106:	ca e0       	ldi	r28, 0x0A	; 10
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	0f 2e       	mov	r0, r31
 10c:	f8 e3       	ldi	r31, 0x38	; 56
 10e:	8f 2e       	mov	r8, r31
 110:	f0 2d       	mov	r31, r0
 112:	0f 2e       	mov	r0, r31
 114:	f7 e3       	ldi	r31, 0x37	; 55
 116:	9f 2e       	mov	r9, r31
 118:	f0 2d       	mov	r31, r0
 11a:	0f 2e       	mov	r0, r31
 11c:	f6 e3       	ldi	r31, 0x36	; 54
 11e:	af 2e       	mov	r10, r31
 120:	f0 2d       	mov	r31, r0
 122:	0f 2e       	mov	r0, r31
 124:	f5 e3       	ldi	r31, 0x35	; 53
 126:	bf 2e       	mov	r11, r31
 128:	f0 2d       	mov	r31, r0
 12a:	0f 2e       	mov	r0, r31
 12c:	f4 e3       	ldi	r31, 0x34	; 52
 12e:	cf 2e       	mov	r12, r31
 130:	f0 2d       	mov	r31, r0
 132:	0f 2e       	mov	r0, r31
 134:	f3 e3       	ldi	r31, 0x33	; 51
 136:	df 2e       	mov	r13, r31
 138:	f0 2d       	mov	r31, r0
 13a:	0f 2e       	mov	r0, r31
 13c:	f2 e3       	ldi	r31, 0x32	; 50
 13e:	ef 2e       	mov	r14, r31
 140:	f0 2d       	mov	r31, r0
 142:	0f 2e       	mov	r0, r31
 144:	f1 e3       	ldi	r31, 0x31	; 49
 146:	ff 2e       	mov	r15, r31
 148:	f0 2d       	mov	r31, r0
 14a:	00 e3       	ldi	r16, 0x30	; 48
 14c:	19 e3       	ldi	r17, 0x39	; 57
 14e:	17 c0       	rjmp	.+46     	; 0x17e <_Z7sendintic+0xb0>
 150:	b9 01       	movw	r22, r18
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	22 0f       	add	r18, r18
 15c:	33 1f       	adc	r19, r19
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	26 0f       	add	r18, r22
 164:	37 1f       	adc	r19, r23
 166:	bf 01       	movw	r22, r30
 168:	0e 94 cd 01 	call	0x39a	; 0x39a <__divmodhi4>
 16c:	28 0f       	add	r18, r24
 16e:	39 1f       	adc	r19, r25
 170:	86 2f       	mov	r24, r22
 172:	97 2f       	mov	r25, r23
 174:	4f 5f       	subi	r20, 0xFF	; 255
 176:	18 16       	cp	r1, r24
 178:	19 06       	cpc	r1, r25
 17a:	54 f3       	brlt	.-44     	; 0x150 <_Z7sendintic+0x82>
 17c:	c1 cf       	rjmp	.-126    	; 0x100 <_Z7sendintic+0x32>
 17e:	c9 01       	movw	r24, r18
 180:	be 01       	movw	r22, r28
 182:	0e 94 cd 01 	call	0x39a	; 0x39a <__divmodhi4>
 186:	8a 30       	cpi	r24, 0x0A	; 10
 188:	91 05       	cpc	r25, r1
 18a:	60 f5       	brcc	.+88     	; 0x1e4 <_Z7sendintic+0x116>
 18c:	fc 01       	movw	r30, r24
 18e:	e6 5d       	subi	r30, 0xD6	; 214
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__tablejump2__>
 196:	5d 9b       	sbis	0x0b, 5	; 11
 198:	fe cf       	rjmp	.-4      	; 0x196 <_Z7sendintic+0xc8>
 19a:	0c b9       	out	0x0c, r16	; 12
 19c:	23 c0       	rjmp	.+70     	; 0x1e4 <_Z7sendintic+0x116>
 19e:	5d 9b       	sbis	0x0b, 5	; 11
 1a0:	fe cf       	rjmp	.-4      	; 0x19e <_Z7sendintic+0xd0>
 1a2:	fc b8       	out	0x0c, r15	; 12
 1a4:	1f c0       	rjmp	.+62     	; 0x1e4 <_Z7sendintic+0x116>
 1a6:	5d 9b       	sbis	0x0b, 5	; 11
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <_Z7sendintic+0xd8>
 1aa:	ec b8       	out	0x0c, r14	; 12
 1ac:	1b c0       	rjmp	.+54     	; 0x1e4 <_Z7sendintic+0x116>
 1ae:	5d 9b       	sbis	0x0b, 5	; 11
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <_Z7sendintic+0xe0>
 1b2:	dc b8       	out	0x0c, r13	; 12
 1b4:	17 c0       	rjmp	.+46     	; 0x1e4 <_Z7sendintic+0x116>
 1b6:	5d 9b       	sbis	0x0b, 5	; 11
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <_Z7sendintic+0xe8>
 1ba:	cc b8       	out	0x0c, r12	; 12
 1bc:	13 c0       	rjmp	.+38     	; 0x1e4 <_Z7sendintic+0x116>
 1be:	5d 9b       	sbis	0x0b, 5	; 11
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <_Z7sendintic+0xf0>
 1c2:	bc b8       	out	0x0c, r11	; 12
 1c4:	0f c0       	rjmp	.+30     	; 0x1e4 <_Z7sendintic+0x116>
 1c6:	5d 9b       	sbis	0x0b, 5	; 11
 1c8:	fe cf       	rjmp	.-4      	; 0x1c6 <_Z7sendintic+0xf8>
 1ca:	ac b8       	out	0x0c, r10	; 12
 1cc:	0b c0       	rjmp	.+22     	; 0x1e4 <_Z7sendintic+0x116>
 1ce:	5d 9b       	sbis	0x0b, 5	; 11
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <_Z7sendintic+0x100>
 1d2:	9c b8       	out	0x0c, r9	; 12
 1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <_Z7sendintic+0x116>
 1d6:	5d 9b       	sbis	0x0b, 5	; 11
 1d8:	fe cf       	rjmp	.-4      	; 0x1d6 <_Z7sendintic+0x108>
 1da:	8c b8       	out	0x0c, r8	; 12
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <_Z7sendintic+0x116>
 1de:	5d 9b       	sbis	0x0b, 5	; 11
 1e0:	fe cf       	rjmp	.-4      	; 0x1de <_Z7sendintic+0x110>
 1e2:	1c b9       	out	0x0c, r17	; 12
 1e4:	c9 01       	movw	r24, r18
 1e6:	be 01       	movw	r22, r28
 1e8:	0e 94 cd 01 	call	0x39a	; 0x39a <__divmodhi4>
 1ec:	9b 01       	movw	r18, r22
 1ee:	41 50       	subi	r20, 0x01	; 1
 1f0:	31 f6       	brne	.-116    	; 0x17e <_Z7sendintic+0xb0>
 1f2:	5d 9b       	sbis	0x0b, 5	; 11
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <_Z7sendintic+0x124>
 1f6:	8a e0       	ldi	r24, 0x0A	; 10
 1f8:	8c b9       	out	0x0c, r24	; 12
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	ff 90       	pop	r15
 204:	ef 90       	pop	r14
 206:	df 90       	pop	r13
 208:	cf 90       	pop	r12
 20a:	bf 90       	pop	r11
 20c:	af 90       	pop	r10
 20e:	9f 90       	pop	r9
 210:	8f 90       	pop	r8
 212:	08 95       	ret

00000214 <_Z8flush_Rxv>:
	
}

void flush_Rx(void)
{
	PORTB&=~(1<<PB4);
 214:	c4 98       	cbi	0x18, 4	; 24
	spi_transceiver(FLUSH_RX);
 216:	82 ee       	ldi	r24, 0xE2	; 226
 218:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
	PORTB|=(1<<PB4);
 21c:	c4 9a       	sbi	0x18, 4	; 24
 21e:	08 95       	ret

00000220 <_Z7receivev>:
}


void receive(void)  // updates global variable x and y dont return anything just update two variables when u call it
{   
 220:	0f 93       	push	r16
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
	 uint8_t result;
	 uint8_t d1, d2, d3, d4;
	
	 PORTB&=~(1<<PB4);
 228:	c4 98       	cbi	0x18, 4	; 24
	 spi_transceiver(R_RX_PAYLOAD);
 22a:	81 e6       	ldi	r24, 0x61	; 97
 22c:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
	 d1=spi_transceiver(0xFF);
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
 236:	d8 2f       	mov	r29, r24
	 d2=spi_transceiver(0xFF);
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
 23e:	08 2f       	mov	r16, r24
	 d3=spi_transceiver(0xFF);
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
 246:	c8 2f       	mov	r28, r24
	 d4=spi_transceiver(0xFF);
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
 24e:	18 2f       	mov	r17, r24
	 PORTB|=(1<<PB4);
 250:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	87 e8       	ldi	r24, 0x87	; 135
 254:	93 e1       	ldi	r25, 0x13	; 19
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <_Z7receivev+0x36>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <_Z7receivev+0x3c>
 25c:	00 00       	nop
	 
	 _delay_ms(20);
	 flush_Rx();
 25e:	0e 94 0a 01 	call	0x214	; 0x214 <_Z8flush_Rxv>
 262:	87 e8       	ldi	r24, 0x87	; 135
 264:	93 e1       	ldi	r25, 0x13	; 19
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <_Z7receivev+0x46>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <_Z7receivev+0x4c>
 26c:	00 00       	nop
	 _delay_ms(20);
	 
	 
	 x=d1;
	 x|=d2<<8;
 26e:	8d 2f       	mov	r24, r29
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	90 2b       	or	r25, r16
 274:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <x+0x1>
 278:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <x>
	 
	 y=d3;
	 y|=d4<<8;
 27c:	8c 2f       	mov	r24, r28
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	91 2b       	or	r25, r17
 282:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 286:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 28a:	87 e8       	ldi	r24, 0x87	; 135
 28c:	93 e1       	ldi	r25, 0x13	; 19
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <_Z7receivev+0x6e>
 292:	00 c0       	rjmp	.+0      	; 0x294 <_Z7receivev+0x74>
 294:	00 00       	nop
 
	 
	 _delay_ms(20);
	 flush_Rx();
 296:	0e 94 0a 01 	call	0x214	; 0x214 <_Z8flush_Rxv>
 29a:	87 e8       	ldi	r24, 0x87	; 135
 29c:	93 e1       	ldi	r25, 0x13	; 19
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <_Z7receivev+0x7e>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <_Z7receivev+0x84>
 2a4:	00 00       	nop
	 _delay_ms(20);
	 
	
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	1f 91       	pop	r17
 2ac:	0f 91       	pop	r16
 2ae:	08 95       	ret

000002b0 <_Z12nrf24l01_intv>:

void nrf24l01_int(void)
{
	    writenrf(EN_AA,0x01);
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 56 00 	call	0xac	; 0xac <_Z8writenrfhh>
	    writenrf(EN_RXADDR,0x01);
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	0e 94 56 00 	call	0xac	; 0xac <_Z8writenrfhh>
	    writenrf(SETUP_AW,0x03);
 2c0:	63 e0       	ldi	r22, 0x03	; 3
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	0e 94 56 00 	call	0xac	; 0xac <_Z8writenrfhh>
	    writenrf(RF_CH,0x78);
 2c8:	68 e7       	ldi	r22, 0x78	; 120
 2ca:	85 e0       	ldi	r24, 0x05	; 5
 2cc:	0e 94 56 00 	call	0xac	; 0xac <_Z8writenrfhh>
	    writenrf(RF_SETUP,0x26); //0b0010 0110
 2d0:	66 e2       	ldi	r22, 0x26	; 38
 2d2:	86 e0       	ldi	r24, 0x06	; 6
 2d4:	0e 94 56 00 	call	0xac	; 0xac <_Z8writenrfhh>
	    writenrf(FEATURE ,0x00);    // could be written to 0x01;
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	8d e1       	ldi	r24, 0x1D	; 29
 2dc:	0e 94 56 00 	call	0xac	; 0xac <_Z8writenrfhh>
	 
	    PORTB&=~(1<<PINB4);
 2e0:	c4 98       	cbi	0x18, 4	; 24
	    spi_transceiver(W_REGISTER+RX_ADDR_P0);
 2e2:	8a e2       	ldi	r24, 0x2A	; 42
 2e4:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
		spi_transceiver(0x01);
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
		spi_transceiver(0x01);
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
		spi_transceiver(0x01);
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
		spi_transceiver(0x01);
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
		spi_transceiver(0x01);
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
		PORTB|=(1<<PINB4);
 306:	c4 9a       	sbi	0x18, 4	; 24
	
	
	    PORTB&=~(1<<PINB4);
 308:	c4 98       	cbi	0x18, 4	; 24
		spi_transceiver(W_REGISTER+TX_ADDR);
 30a:	80 e3       	ldi	r24, 0x30	; 48
 30c:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
	    spi_transceiver(0x01);
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
		spi_transceiver(0x01);
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
		spi_transceiver(0x01);
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
		spi_transceiver(0x01);
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
	    spi_transceiver(0x01);
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z15spi_transceiverh>
	    PORTB|=(1<<PINB4); 
 32e:	c4 9a       	sbi	0x18, 4	; 24
	
	writenrf(RX_PW_P0,0x04);
 330:	64 e0       	ldi	r22, 0x04	; 4
 332:	81 e1       	ldi	r24, 0x11	; 17
 334:	0e 94 56 00 	call	0xac	; 0xac <_Z8writenrfhh>
	writenrf(CONFIG,0x7F);  
 338:	6f e7       	ldi	r22, 0x7F	; 127
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 56 00 	call	0xac	; 0xac <_Z8writenrfhh>
 340:	08 95       	ret

00000342 <main>:
}



int main(void)
{   DDRC|=(1<<PC7)|(1<<PC6);
 342:	84 b3       	in	r24, 0x14	; 20
 344:	80 6c       	ori	r24, 0xC0	; 192
 346:	84 bb       	out	0x14, r24	; 20
	DDRD|=(1<<PD4)|(PD5);
 348:	81 b3       	in	r24, 0x11	; 17
 34a:	85 61       	ori	r24, 0x15	; 21
 34c:	81 bb       	out	0x11, r24	; 17
	DDRD |=(1<<PD5);
 34e:	8d 9a       	sbi	0x11, 5	; 17
	DDRD |=(1<<PD4);
 350:	8c 9a       	sbi	0x11, 4	; 17

	UCSRC &=~(1<<URSEL);
 352:	80 b5       	in	r24, 0x20	; 32
 354:	8f 77       	andi	r24, 0x7F	; 127
 356:	80 bd       	out	0x20, r24	; 32
	unsigned int  h = 51;
	UBRRH=(unsigned char)(h>>8);
 358:	10 bc       	out	0x20, r1	; 32
	UBRRL=(unsigned char)h;
 35a:	83 e3       	ldi	r24, 0x33	; 51
 35c:	89 b9       	out	0x09, r24	; 9
	
	UCSRC |=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 35e:	80 b5       	in	r24, 0x20	; 32
 360:	86 68       	ori	r24, 0x86	; 134
 362:	80 bd       	out	0x20, r24	; 32
	UCSRB &=~(1<<UCSZ2);
 364:	52 98       	cbi	0x0a, 2	; 10
	UCSRC &=(1<<UMSEL)& ~(1<<UPM1)& ~(1<<UPM0)&(1<<USBS);
 366:	80 b5       	in	r24, 0x20	; 32
 368:	10 bc       	out	0x20, r1	; 32
	UCSRB |=(1<<TXEN);
 36a:	53 9a       	sbi	0x0a, 3	; 10
	
	
	spi();
 36c:	0e 94 48 00 	call	0x90	; 0x90 <_Z3spiv>
	
	DDRD|=(1<<PD7);
 370:	8f 9a       	sbi	0x11, 7	; 17


		
   	
    while (1) 
    {	PORTB|=(1<<PB1); 
 372:	c1 9a       	sbi	0x18, 1	; 24
		nrf24l01_int();
 374:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_Z12nrf24l01_intv>
		
        receive();
 378:	0e 94 10 01 	call	0x220	; 0x220 <_Z7receivev>
	 sendint(x,'a');
 37c:	61 e6       	ldi	r22, 0x61	; 97
 37e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <x>
 382:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <x+0x1>
 386:	0e 94 67 00 	call	0xce	; 0xce <_Z7sendintic>
	 sendint(y,'b');
 38a:	62 e6       	ldi	r22, 0x62	; 98
 38c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 390:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 394:	0e 94 67 00 	call	0xce	; 0xce <_Z7sendintic>
 398:	ec cf       	rjmp	.-40     	; 0x372 <main+0x30>

0000039a <__divmodhi4>:
 39a:	97 fb       	bst	r25, 7
 39c:	07 2e       	mov	r0, r23
 39e:	16 f4       	brtc	.+4      	; 0x3a4 <__divmodhi4+0xa>
 3a0:	00 94       	com	r0
 3a2:	07 d0       	rcall	.+14     	; 0x3b2 <__divmodhi4_neg1>
 3a4:	77 fd       	sbrc	r23, 7
 3a6:	09 d0       	rcall	.+18     	; 0x3ba <__divmodhi4_neg2>
 3a8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__udivmodhi4>
 3ac:	07 fc       	sbrc	r0, 7
 3ae:	05 d0       	rcall	.+10     	; 0x3ba <__divmodhi4_neg2>
 3b0:	3e f4       	brtc	.+14     	; 0x3c0 <__divmodhi4_exit>

000003b2 <__divmodhi4_neg1>:
 3b2:	90 95       	com	r25
 3b4:	81 95       	neg	r24
 3b6:	9f 4f       	sbci	r25, 0xFF	; 255
 3b8:	08 95       	ret

000003ba <__divmodhi4_neg2>:
 3ba:	70 95       	com	r23
 3bc:	61 95       	neg	r22
 3be:	7f 4f       	sbci	r23, 0xFF	; 255

000003c0 <__divmodhi4_exit>:
 3c0:	08 95       	ret

000003c2 <__tablejump2__>:
 3c2:	ee 0f       	add	r30, r30
 3c4:	ff 1f       	adc	r31, r31
 3c6:	05 90       	lpm	r0, Z+
 3c8:	f4 91       	lpm	r31, Z
 3ca:	e0 2d       	mov	r30, r0
 3cc:	09 94       	ijmp

000003ce <__udivmodhi4>:
 3ce:	aa 1b       	sub	r26, r26
 3d0:	bb 1b       	sub	r27, r27
 3d2:	51 e1       	ldi	r21, 0x11	; 17
 3d4:	07 c0       	rjmp	.+14     	; 0x3e4 <__udivmodhi4_ep>

000003d6 <__udivmodhi4_loop>:
 3d6:	aa 1f       	adc	r26, r26
 3d8:	bb 1f       	adc	r27, r27
 3da:	a6 17       	cp	r26, r22
 3dc:	b7 07       	cpc	r27, r23
 3de:	10 f0       	brcs	.+4      	; 0x3e4 <__udivmodhi4_ep>
 3e0:	a6 1b       	sub	r26, r22
 3e2:	b7 0b       	sbc	r27, r23

000003e4 <__udivmodhi4_ep>:
 3e4:	88 1f       	adc	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	5a 95       	dec	r21
 3ea:	a9 f7       	brne	.-22     	; 0x3d6 <__udivmodhi4_loop>
 3ec:	80 95       	com	r24
 3ee:	90 95       	com	r25
 3f0:	bc 01       	movw	r22, r24
 3f2:	cd 01       	movw	r24, r26
 3f4:	08 95       	ret

000003f6 <_exit>:
 3f6:	f8 94       	cli

000003f8 <__stop_program>:
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <__stop_program>
