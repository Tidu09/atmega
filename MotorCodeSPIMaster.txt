/*
 * MotorCodeSPIMaster.c
 *
 * Created: 2/7/2019 6:33:45 PM
 * Author : DELL
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>
#include <math.h>

uint8_t x1,x2,y1,y2;
uint16_t res;
uint8_t v1,v2,joyval,lv;
uint8_t data,rec;
int i,flag=0;

void ADC_Initialize()
{
	ADCSRA |= 1<<ADIE;
	ADMUX |= 1<<REFS0;
	ADMUX |= 1<<ADLAR;
	ADCSRA |= 1<<ADEN;
	sei();
	ADCSRA |= 1<<ADSC;
}

void SPI_MasterInit()
{
	DDRB = (1<<PINB5) | (1<<PINB7) | (1<<PINB4); //output
	DDRB &= ~(1<<PINB6); //input
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0) | (1<<DORD); //enable SPI
}

void SPI_MasterTransmit(uint8_t data)
{
	PORTB &= ~(1<<PINB4); //pulling SS low
	SPDR = data; //start transmission
	while(!(SPSR & (1<<SPIF))); //wait for transmission to complete
	PORTB |= (1<<PINB4);
}

int main(void)
{
	ADC_Initialize();
	SPI_MasterInit();
	
	while (1)
	{
	}
}

ISR(ADC_vect)
{
	lv = ADCL;
	res = (ADCH<<2 | lv>>6);
	joyval = res; //8bits --------
	v1=joyval<<2; //6bits ------00
	joyval=res>>6; //4bits 0000----
	v2=joyval<<2; //4bits 00----00
	
	switch(ADMUX)
	{
		case 0x60:
		x1=(v1 | 0b00000000); //6bits
		x2=(v2 | 0b00000001); //4bits
		SPI_MasterTransmit(x1);
		SPI_MasterTransmit(x2);
		ADMUX = 0x61;
		break;
		
		case 0x61:
		y1=(v1 | 0b00000010);
		y2=(v2 | 0b00000011);
		SPI_MasterTransmit(y1);
		SPI_MasterTransmit(y2);
		ADMUX = 0x60;
		break;
	}
	
	ADCSRA |= 1<<ADSC;
}