/*
 * SPI_Motor_Recieve.c
 *
 * Created: 03-02-2019 01:35:15
 * Author : TIDU
 */ 

#include <avr/io.h>
#include <stdlib.h>
#include <util/delay.h>


int joyval;

int X;
int Y;
int joy;
int Tenbit1;
int Tenbit2;
int Tenbit3;
int Tenbit4;
int tenbitx;
int tenbity;
int hvx;
int lvx;
int hvy;
int lvy;


int main(void)
{    
    Pwm_initialize();
    Slave_initialize();
	
    /* Replace with your application code */
    while (1) 
    {   //DDRC|=1<<PINC0;
		
		
		Tenbit2=Recieve();
		hvx=condition(Tenbit2);
		
		Tenbit1=Recieve();
        lvx=condition(Tenbit1);
		
		Tenbit4=Recieve();
		hvy=condition(Tenbit4);
		
		Tenbit3=Recieve();
		lvy=condition(Tenbit3);
	
		
		tenbitx=(hvx<<5)|lvx;
		if(tenbitx>950)
		{
			tenbitx=1023;
		}
		
		
		tenbity=(hvy<<5)|lvy;
		if(tenbity>950)
		{
			tenbity=1023;
		}
		
		
		//tenbitx=(Tenbit2<<5)|(Tenbit1);
		//tenbity=(Tenbit4<<5)|(Tenbit3);
	    
		X=(tenbitx*2-1023);
		
		
		if(abs(X)<=220)
		{
			X=0;
		}
		
		Y=(tenbity*2-1023);
		
		if(abs(Y)<=220)
		{
			Y=0;
		}
		
		
		
		
	drive(X,Y);
		
    }
}



int Slave_initialize()
{
	DDRB|=(1<<PINB6);
	SPCR|=(1<<SPE);
}

int Recieve()
{
	while(!(SPSR &(1<<SPIF)));
	return(SPDR);
}

void Pwm_initialize(void)
{
	DDRB|= (1<<PINB3);
	DDRB|=(1<<PINB0)|(1<<PINB1);
	
	DDRD|=(1<<PIND7)|(1<<PIND4)|(1<<PIND5);
	
	TCCR0|= (1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS01) ; // PWM setting for pinb3, timer 0
	TCCR2|= (1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS20) ; // PWM setting for pind7 time
	
	TCCR1A|= (1<<WGM10)|(1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
	TCCR1B|= (1<<WGM12)|(1<<CS10);
	
}


int drive(int X,int Y)
{
	if(X==0 && Y==0)
	{
		PORTB &=~(1<<PINB0);
		PORTB &=~(1<<PINB1);
		OCR1A=0;
		OCR1B=0;
	}
	
	
	
	else  if (X >= 0 && Y >= 0)          // First quadrant
	{
		int level = X - Y;
		if (level == 0)
		{
			OCR1A=abs(X);
			OCR1B=0;
			PORTB=(0<<PINB0)|(0<<PINB1);
			
		}
		if (level > 0)
		{
			
			OCR1A=abs(X);
			OCR1B=abs(X-Y);
			PORTB=(0<<PINB0)|(1<<PINB1);
			
		}
		if (level < 0)
		{
			OCR1A=abs(Y);
			OCR1B=abs(X-Y);
			PORTB=(0<<PINB0)|(0<<PINB1);
		}
	}
	
	else if (X <= 0 && Y >= 0) // Second Quad
	{
		int level = X + Y;
		if (level == 0)
		{
			OCR1B=abs(Y);
			OCR1A=0;
			PORTB=(0<<PINB0)|(0<<PINB1);
		}
		if (level > 0)
		{
			OCR1A=abs(X+Y);
			OCR1B=abs(Y);
			PORTB=(0<<PINB0)|(0<<PINB1);

		}
		if (level < 0)
		{
			OCR1A=abs(X+Y);
			OCR1B=abs(X);
			PORTB=(1<<PINB0)|(0<<PINB1);
		}
	}
	
	
	else if (X >= 0 && Y <= 0) // Fourth quad
	{
		int level = X + Y;
		if (level == 0)
		{
			OCR1A=abs(0);
			OCR1B=abs(Y);
			PORTB=(0<<PINB0)|(1<<PINB1);
		}
		if (level > 0)
		{
			OCR1A=abs(X+Y);
			OCR1B=abs(X);
			PORTB=(0<<PINB0)|(1<<PINB1);

		}
		if (level < 0)
		{
			OCR1A=abs(X+Y);
			OCR1B=abs(Y);
			PORTB=(1<<PINB0)|(1<<PINB1);
		}
	}
	
	
	else if (X <=0 && Y <=0) // Third quad
	{
		int level = X - Y;
		if (level == 0)
		{
			OCR1A=abs(X);
			OCR1B=abs(0);
			PORTB=(1<<PINB0)|(0<<PINB1);
		}
		if (level > 0)
		{
			
			OCR1A=abs(Y);
			OCR1B=abs(X-Y);
			PORTB=(1<<PINB0)|(1<<PINB1);
		}
		if (level < 0)
		{
			OCR1A=abs(X);
			OCR1B=abs(X-Y);
			PORTB=(1<<PINB0)|(0<<PINB1);
			
		}
	}
	return 0;
}


int condition(int joy)
{
	if ((joy & 0b11000000)==0b11000000)
	{
		Tenbit2=joy;
		Tenbit2 &=0b00011111;
		return (Tenbit2);
	}
	
	
	else if ((joy & 0b11000000)==0b10000000)
	{
		Tenbit1=joy;
		Tenbit1 &=0b00011111;
		return (Tenbit1);
		
	}
	
	else if ((joy & 0b11000000)==0b00000000)
	{
		Tenbit4=joy;
		Tenbit4 &=0b00011111;
		return(Tenbit4);
	}
	
	else if((joy & 0b11000000)==0b01000000)
	{
		Tenbit3=joy;
		Tenbit3 &=0b00011111;
		return(Tenbit3);
	}
	
}
