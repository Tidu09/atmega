/*
 * SPI_motor_transmit.c
 *
 * Created: 03-02-2019 01:28:37
 * Author : TIDU
 */ 


#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdlib.h>


int hv;
int joyval;
uint16_t Tenbit;
int lv;
int joyval1;
int joyval2;
uint8_t Tenbit1;
uint8_t Tenbit2;
uint8_t Tenbit3;
uint8_t Tenbit4;

int main(void)
{
	sei();
	ADC_begin();
	ADC_initialise();
	Master_initialize();
	ADC_start();
	
    /* Replace with your application code */
    while (1) 
    {
    }
}


void ADC_begin()
{
	ADMUX |= (1<<REFS0)|(1<<ADLAR); // taking input voltage as reference & doing right shift to the result
	ADCSRA |= 1<<ADPS2; // prescaller set to 16
}

void ADC_initialise()
{
	ADCSRA |= 1<<ADEN;
	ADCSRA |= 1<<ADIE;
	ADCSRA|=1<<ADATE;
}
void ADC_start()
{
	ADCSRA|=1<<ADSC;
}


ISR(ADC_vect)
{
	hv=ADCH;
	lv=ADCL;
	Tenbit=(ADCH<<2|lv>>6);
	
	switch(ADMUX)
	{
		case 0x60:
		{
			Tenbit2=(Tenbit>>5);
			Tenbit2|=0b11000000;
			Transmit(Tenbit2);
			
			Tenbit1 =Tenbit & 0b00011111;
			Tenbit1|=0b10000000;
			Transmit(Tenbit1);
			ADMUX=0x61;
			break;
		}
		
		case 0x61:
		{
			
			Tenbit4=(Tenbit>>5);
			Tenbit4|=0b00000000;
			Transmit(Tenbit4);
			
			Tenbit3 =Tenbit & 0b00011111;
			Tenbit3|=0b01000000;
			Transmit(Tenbit3);
			
			ADMUX=0x60;
			break;
		}
		
	}
	ADCSRA|=1<<ADSC;
}

void Master_initialize()
{
	DDRB|=(1<<PINB5)|(1<<PINB7)|(1<<PINB4);   //  SCK and MOSI and SS as output
	
	SPCR|=(1<<SPE)|(1<<MSTR)|(1<<SPR1);
	
}

void Transmit(char data)
{
	PORTD|=(1<<PIND7);
	//_delay_ms(200);
	SPDR= data;
	while(!(SPSR &(1<<SPIF)));
	
}

