
MotorCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000416  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000048a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  0000048a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ac  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000600  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000493  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001778  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000344  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e3  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001e23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 37       	cpi	r26, 0x70	; 112
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <main>
  74:	0c 94 09 02 	jmp	0x412	; 0x412 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_begin>:
}


void ADC_begin()
{
	ADMUX |= (1<<REFS0)|(1<<ADLAR); // taking input voltage as reference & doing right shift to the result
  7c:	87 b1       	in	r24, 0x07	; 7
  7e:	80 66       	ori	r24, 0x60	; 96
  80:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 1<<ADPS2; // prescaller set to 16
  82:	32 9a       	sbi	0x06, 2	; 6
  84:	08 95       	ret

00000086 <ADC_initialise>:
}

void ADC_initialise()
{
ADCSRA |= 1<<ADEN;
  86:	37 9a       	sbi	0x06, 7	; 6
ADCSRA |= 1<<ADIE;
  88:	33 9a       	sbi	0x06, 3	; 6
ADCSRA|=1<<ADATE;
  8a:	35 9a       	sbi	0x06, 5	; 6

ADCSRA |= 1<<ADSC;
  8c:	36 9a       	sbi	0x06, 6	; 6
  8e:	08 95       	ret

00000090 <__vector_14>:
}



ISR(ADC_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	bitval=ADCH;
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	lv=ADCL;
  ae:	24 b1       	in	r18, 0x04	; 4
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	30 93 6b 00 	sts	0x006B, r19	; 0x80006b <lv+0x1>
  b6:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <lv>
	Tenbit=(ADCH<<2|lv>>6);
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	02 2e       	mov	r0, r18
  c8:	23 2f       	mov	r18, r19
  ca:	00 0c       	add	r0, r0
  cc:	22 1f       	adc	r18, r18
  ce:	33 0b       	sbc	r19, r19
  d0:	00 0c       	add	r0, r0
  d2:	22 1f       	adc	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	82 2b       	or	r24, r18
  d8:	93 2b       	or	r25, r19
  da:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <Tenbit+0x1>
  de:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Tenbit>
	joyval=(Tenbit-512)/2;
  e2:	92 50       	subi	r25, 0x02	; 2
  e4:	9c 01       	movw	r18, r24
  e6:	99 23       	and	r25, r25
  e8:	14 f4       	brge	.+4      	; 0xee <__vector_14+0x5e>
  ea:	2f 5f       	subi	r18, 0xFF	; 255
  ec:	3f 4f       	sbci	r19, 0xFF	; 255
  ee:	35 95       	asr	r19
  f0:	27 95       	ror	r18
	if(abs(joyval)<=25)
  f2:	c9 01       	movw	r24, r18
  f4:	49 96       	adiw	r24, 0x19	; 25
  f6:	c3 97       	sbiw	r24, 0x33	; 51
  f8:	28 f0       	brcs	.+10     	; 0x104 <__vector_14+0x74>
ISR(ADC_vect)
{
	bitval=ADCH;
	lv=ADCL;
	Tenbit=(ADCH<<2|lv>>6);
	joyval=(Tenbit-512)/2;
  fa:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <joyval+0x1>
  fe:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <joyval>
 102:	04 c0       	rjmp	.+8      	; 0x10c <__vector_14+0x7c>
	if(abs(joyval)<=25)
	{
		joyval=0;
 104:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <joyval+0x1>
 108:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <joyval>
	}
	
	
	switch(ADMUX)
 10c:	87 b1       	in	r24, 0x07	; 7
 10e:	80 36       	cpi	r24, 0x60	; 96
 110:	19 f0       	breq	.+6      	; 0x118 <__vector_14+0x88>
 112:	81 36       	cpi	r24, 0x61	; 97
 114:	61 f0       	breq	.+24     	; 0x12e <__vector_14+0x9e>
 116:	15 c0       	rjmp	.+42     	; 0x142 <__vector_14+0xb2>
	{
		case 0x60:
		{
			joyval1=joyval;
 118:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <joyval>
 11c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <joyval+0x1>
 120:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <joyval1+0x1>
 124:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <joyval1>
			ADMUX=0x61;
 128:	81 e6       	ldi	r24, 0x61	; 97
 12a:	87 b9       	out	0x07, r24	; 7
			break;
 12c:	0a c0       	rjmp	.+20     	; 0x142 <__vector_14+0xb2>
		}
		
		case 0x61:
		{
			joyval2=joyval;
 12e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <joyval>
 132:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <joyval+0x1>
 136:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <joyval2+0x1>
 13a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <joyval2>
		    ADMUX=0x60;
 13e:	80 e6       	ldi	r24, 0x60	; 96
 140:	87 b9       	out	0x07, r24	; 7
			break;
		}
		
	}
	
}
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	3f 91       	pop	r19
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <drive>:

int drive(int X,int Y)
{
	
	if(abs(X)<=30)
 154:	9c 01       	movw	r18, r24
 156:	22 5e       	subi	r18, 0xE2	; 226
 158:	3f 4f       	sbci	r19, 0xFF	; 255
 15a:	2d 33       	cpi	r18, 0x3D	; 61
 15c:	31 05       	cpc	r19, r1
 15e:	08 f4       	brcc	.+2      	; 0x162 <drive+0xe>
 160:	20 c1       	rjmp	.+576    	; 0x3a2 <drive+0x24e>
	{
		X=0;
	}
	if(abs(Y)<=30)
 162:	9b 01       	movw	r18, r22
 164:	22 5e       	subi	r18, 0xE2	; 226
 166:	3f 4f       	sbci	r19, 0xFF	; 255
 168:	2d 33       	cpi	r18, 0x3D	; 61
 16a:	31 05       	cpc	r19, r1
 16c:	08 f4       	brcc	.+2      	; 0x170 <drive+0x1c>
 16e:	05 c1       	rjmp	.+522    	; 0x37a <drive+0x226>
	{
		Y=0;
	}
	
	if (X >= 0 && Y >= 0)          // First quadrant
 170:	99 23       	and	r25, r25
 172:	0c f4       	brge	.+2      	; 0x176 <drive+0x22>
 174:	44 c0       	rjmp	.+136    	; 0x1fe <drive+0xaa>
 176:	77 23       	and	r23, r23
 178:	0c f4       	brge	.+2      	; 0x17c <drive+0x28>
 17a:	1b c1       	rjmp	.+566    	; 0x3b2 <drive+0x25e>
 17c:	07 c0       	rjmp	.+14     	; 0x18c <drive+0x38>
	{
		X=0;
	}
	if(abs(Y)<=30)
	{
		Y=0;
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	04 c0       	rjmp	.+8      	; 0x18c <drive+0x38>
int drive(int X,int Y)
{
	
	if(abs(X)<=30)
	{
		X=0;
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(abs(Y)<=30)
	{
		Y=0;
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	70 e0       	ldi	r23, 0x00	; 0
	}
	
	if (X >= 0 && Y >= 0)          // First quadrant
	{
		int level = X - Y;
 18c:	9c 01       	movw	r18, r24
 18e:	26 1b       	sub	r18, r22
 190:	37 0b       	sbc	r19, r23
		if (level == 0)
 192:	59 f4       	brne	.+22     	; 0x1aa <drive+0x56>
		{
			OCR0=abs(X);
 194:	9c 01       	movw	r18, r24
 196:	99 23       	and	r25, r25
 198:	24 f4       	brge	.+8      	; 0x1a2 <drive+0x4e>
 19a:	22 27       	eor	r18, r18
 19c:	33 27       	eor	r19, r19
 19e:	28 1b       	sub	r18, r24
 1a0:	39 0b       	sbc	r19, r25
 1a2:	2c bf       	out	0x3c, r18	; 60
			OCR2=0;
 1a4:	13 bc       	out	0x23, r1	; 35
			PORTB=(0<<PINB0)|(0<<PINB1);
 1a6:	18 ba       	out	0x18, r1	; 24
 1a8:	ee c0       	rjmp	.+476    	; 0x386 <drive+0x232>
			
		}
		if (level > 0)
 1aa:	12 16       	cp	r1, r18
 1ac:	13 06       	cpc	r1, r19
 1ae:	94 f4       	brge	.+36     	; 0x1d4 <drive+0x80>
		{
			
			OCR0=abs(X);
 1b0:	ac 01       	movw	r20, r24
 1b2:	99 23       	and	r25, r25
 1b4:	24 f4       	brge	.+8      	; 0x1be <drive+0x6a>
 1b6:	44 27       	eor	r20, r20
 1b8:	55 27       	eor	r21, r21
 1ba:	48 1b       	sub	r20, r24
 1bc:	59 0b       	sbc	r21, r25
 1be:	4c bf       	out	0x3c, r20	; 60
			OCR2=abs(X-Y);
 1c0:	a9 01       	movw	r20, r18
 1c2:	33 23       	and	r19, r19
 1c4:	24 f4       	brge	.+8      	; 0x1ce <drive+0x7a>
 1c6:	44 27       	eor	r20, r20
 1c8:	55 27       	eor	r21, r21
 1ca:	42 1b       	sub	r20, r18
 1cc:	53 0b       	sbc	r21, r19
 1ce:	43 bd       	out	0x23, r20	; 35
			PORTB=(0<<PINB0)|(1<<PINB1);
 1d0:	42 e0       	ldi	r20, 0x02	; 2
 1d2:	48 bb       	out	0x18, r20	; 24
			
		}
		if (level < 0)
 1d4:	33 23       	and	r19, r19
 1d6:	0c f0       	brlt	.+2      	; 0x1da <drive+0x86>
 1d8:	d6 c0       	rjmp	.+428    	; 0x386 <drive+0x232>
		{
			OCR0=abs(Y);
 1da:	ab 01       	movw	r20, r22
 1dc:	77 23       	and	r23, r23
 1de:	24 f4       	brge	.+8      	; 0x1e8 <drive+0x94>
 1e0:	44 27       	eor	r20, r20
 1e2:	55 27       	eor	r21, r21
 1e4:	46 1b       	sub	r20, r22
 1e6:	57 0b       	sbc	r21, r23
 1e8:	4c bf       	out	0x3c, r20	; 60
			OCR2=abs(X-Y);
 1ea:	a9 01       	movw	r20, r18
 1ec:	33 23       	and	r19, r19
 1ee:	24 f4       	brge	.+8      	; 0x1f8 <drive+0xa4>
 1f0:	44 27       	eor	r20, r20
 1f2:	55 27       	eor	r21, r21
 1f4:	42 1b       	sub	r20, r18
 1f6:	53 0b       	sbc	r21, r19
 1f8:	43 bd       	out	0x23, r20	; 35
			PORTB=(0<<PINB0)|(0<<PINB1);
 1fa:	18 ba       	out	0x18, r1	; 24
 1fc:	c4 c0       	rjmp	.+392    	; 0x386 <drive+0x232>
		}
	}
	
	if (X <= 0 && Y >= 0) // Second Quad
 1fe:	77 23       	and	r23, r23
 200:	0c f4       	brge	.+2      	; 0x204 <drive+0xb0>
 202:	c6 c0       	rjmp	.+396    	; 0x390 <drive+0x23c>
	{
		int level = X + Y;
 204:	9c 01       	movw	r18, r24
 206:	26 0f       	add	r18, r22
 208:	37 1f       	adc	r19, r23
		if (level == 0)
 20a:	21 15       	cp	r18, r1
 20c:	31 05       	cpc	r19, r1
 20e:	59 f4       	brne	.+22     	; 0x226 <drive+0xd2>
		{
			OCR2=abs(Y);
 210:	9b 01       	movw	r18, r22
 212:	77 23       	and	r23, r23
 214:	24 f4       	brge	.+8      	; 0x21e <drive+0xca>
 216:	22 27       	eor	r18, r18
 218:	33 27       	eor	r19, r19
 21a:	26 1b       	sub	r18, r22
 21c:	37 0b       	sbc	r19, r23
 21e:	23 bd       	out	0x23, r18	; 35
			OCR0=0;
 220:	1c be       	out	0x3c, r1	; 60
			PORTB=(0<<PINB0)|(0<<PINB1);
 222:	18 ba       	out	0x18, r1	; 24
 224:	28 c0       	rjmp	.+80     	; 0x276 <drive+0x122>
		}
		if (level > 0)
 226:	12 16       	cp	r1, r18
 228:	13 06       	cpc	r1, r19
 22a:	8c f4       	brge	.+34     	; 0x24e <drive+0xfa>
		{
			OCR0=abs(level);
 22c:	a9 01       	movw	r20, r18
 22e:	33 23       	and	r19, r19
 230:	24 f4       	brge	.+8      	; 0x23a <drive+0xe6>
 232:	44 27       	eor	r20, r20
 234:	55 27       	eor	r21, r21
 236:	42 1b       	sub	r20, r18
 238:	53 0b       	sbc	r21, r19
 23a:	4c bf       	out	0x3c, r20	; 60
			OCR2=abs(Y);
 23c:	ab 01       	movw	r20, r22
 23e:	77 23       	and	r23, r23
 240:	24 f4       	brge	.+8      	; 0x24a <drive+0xf6>
 242:	44 27       	eor	r20, r20
 244:	55 27       	eor	r21, r21
 246:	46 1b       	sub	r20, r22
 248:	57 0b       	sbc	r21, r23
 24a:	43 bd       	out	0x23, r20	; 35
			PORTB=(0<<PINB0)|(0<<PINB1);
 24c:	18 ba       	out	0x18, r1	; 24

		}
		if (level < 0)
 24e:	33 23       	and	r19, r19
 250:	94 f4       	brge	.+36     	; 0x276 <drive+0x122>
		{
			OCR0=abs(level);
 252:	a9 01       	movw	r20, r18
 254:	33 23       	and	r19, r19
 256:	24 f4       	brge	.+8      	; 0x260 <drive+0x10c>
 258:	44 27       	eor	r20, r20
 25a:	55 27       	eor	r21, r21
 25c:	42 1b       	sub	r20, r18
 25e:	53 0b       	sbc	r21, r19
 260:	4c bf       	out	0x3c, r20	; 60
			OCR2=abs(X);
 262:	9c 01       	movw	r18, r24
 264:	99 23       	and	r25, r25
 266:	24 f4       	brge	.+8      	; 0x270 <drive+0x11c>
 268:	22 27       	eor	r18, r18
 26a:	33 27       	eor	r19, r19
 26c:	28 1b       	sub	r18, r24
 26e:	39 0b       	sbc	r19, r25
 270:	23 bd       	out	0x23, r18	; 35
			PORTB=(1<<PINB0)|(0<<PINB1);
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	28 bb       	out	0x18, r18	; 24
		}
	}
	
	
	if (X >= 0 && Y <= 0) // Fourth quad
 276:	99 23       	and	r25, r25
 278:	0c f4       	brge	.+2      	; 0x27c <drive+0x128>
 27a:	41 c0       	rjmp	.+130    	; 0x2fe <drive+0x1aa>
 27c:	16 16       	cp	r1, r22
 27e:	17 06       	cpc	r1, r23
 280:	0c f4       	brge	.+2      	; 0x284 <drive+0x130>
 282:	9c c0       	rjmp	.+312    	; 0x3bc <drive+0x268>
	{
		int level = X + Y;
 284:	9b 01       	movw	r18, r22
 286:	28 0f       	add	r18, r24
 288:	39 1f       	adc	r19, r25
		if (level == 0)
 28a:	21 15       	cp	r18, r1
 28c:	31 05       	cpc	r19, r1
 28e:	61 f4       	brne	.+24     	; 0x2a8 <drive+0x154>
		{
			OCR0=abs(0);
 290:	1c be       	out	0x3c, r1	; 60
			OCR2=abs(Y);
 292:	9b 01       	movw	r18, r22
 294:	77 23       	and	r23, r23
 296:	24 f4       	brge	.+8      	; 0x2a0 <drive+0x14c>
 298:	22 27       	eor	r18, r18
 29a:	33 27       	eor	r19, r19
 29c:	26 1b       	sub	r18, r22
 29e:	37 0b       	sbc	r19, r23
 2a0:	23 bd       	out	0x23, r18	; 35
			PORTB=(0<<PINB0)|(1<<PINB1);
 2a2:	22 e0       	ldi	r18, 0x02	; 2
 2a4:	28 bb       	out	0x18, r18	; 24
 2a6:	78 c0       	rjmp	.+240    	; 0x398 <drive+0x244>
		}
		if (level > 0)
 2a8:	12 16       	cp	r1, r18
 2aa:	13 06       	cpc	r1, r19
 2ac:	94 f4       	brge	.+36     	; 0x2d2 <drive+0x17e>
		{
			OCR0=abs(X+Y);
 2ae:	a9 01       	movw	r20, r18
 2b0:	33 23       	and	r19, r19
 2b2:	24 f4       	brge	.+8      	; 0x2bc <drive+0x168>
 2b4:	44 27       	eor	r20, r20
 2b6:	55 27       	eor	r21, r21
 2b8:	42 1b       	sub	r20, r18
 2ba:	53 0b       	sbc	r21, r19
 2bc:	4c bf       	out	0x3c, r20	; 60
			OCR2=abs(X);
 2be:	ac 01       	movw	r20, r24
 2c0:	99 23       	and	r25, r25
 2c2:	24 f4       	brge	.+8      	; 0x2cc <drive+0x178>
 2c4:	44 27       	eor	r20, r20
 2c6:	55 27       	eor	r21, r21
 2c8:	48 1b       	sub	r20, r24
 2ca:	59 0b       	sbc	r21, r25
 2cc:	43 bd       	out	0x23, r20	; 35
			PORTB=(0<<PINB0)|(1<<PINB1);
 2ce:	42 e0       	ldi	r20, 0x02	; 2
 2d0:	48 bb       	out	0x18, r20	; 24

		}
		if (level < 0)
 2d2:	33 23       	and	r19, r19
 2d4:	0c f0       	brlt	.+2      	; 0x2d8 <drive+0x184>
 2d6:	60 c0       	rjmp	.+192    	; 0x398 <drive+0x244>
		{
			OCR0=abs(X+Y);
 2d8:	a9 01       	movw	r20, r18
 2da:	33 23       	and	r19, r19
 2dc:	24 f4       	brge	.+8      	; 0x2e6 <drive+0x192>
 2de:	44 27       	eor	r20, r20
 2e0:	55 27       	eor	r21, r21
 2e2:	42 1b       	sub	r20, r18
 2e4:	53 0b       	sbc	r21, r19
 2e6:	4c bf       	out	0x3c, r20	; 60
			OCR2=abs(Y);
 2e8:	9b 01       	movw	r18, r22
 2ea:	77 23       	and	r23, r23
 2ec:	24 f4       	brge	.+8      	; 0x2f6 <drive+0x1a2>
 2ee:	22 27       	eor	r18, r18
 2f0:	33 27       	eor	r19, r19
 2f2:	26 1b       	sub	r18, r22
 2f4:	37 0b       	sbc	r19, r23
 2f6:	23 bd       	out	0x23, r18	; 35
			PORTB=(1<<PINB0)|(1<<PINB1);
 2f8:	23 e0       	ldi	r18, 0x03	; 3
 2fa:	28 bb       	out	0x18, r18	; 24
 2fc:	4d c0       	rjmp	.+154    	; 0x398 <drive+0x244>
		}
	}
	
	
	if (X <= 0 && Y <=0) // Third quad
 2fe:	16 16       	cp	r1, r22
 300:	17 06       	cpc	r1, r23
 302:	0c f4       	brge	.+2      	; 0x306 <drive+0x1b2>
 304:	5b c0       	rjmp	.+182    	; 0x3bc <drive+0x268>
	{
		int level = X - Y;
 306:	9c 01       	movw	r18, r24
 308:	26 1b       	sub	r18, r22
 30a:	37 0b       	sbc	r19, r23
		if (level == 0)
 30c:	61 f4       	brne	.+24     	; 0x326 <drive+0x1d2>
		{
			OCR0=abs(X);
 30e:	9c 01       	movw	r18, r24
 310:	99 23       	and	r25, r25
 312:	24 f4       	brge	.+8      	; 0x31c <drive+0x1c8>
 314:	22 27       	eor	r18, r18
 316:	33 27       	eor	r19, r19
 318:	28 1b       	sub	r18, r24
 31a:	39 0b       	sbc	r19, r25
 31c:	2c bf       	out	0x3c, r18	; 60
			OCR2=abs(0);
 31e:	13 bc       	out	0x23, r1	; 35
			PORTB=(1<<PINB0)|(0<<PINB1);
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	88 bb       	out	0x18, r24	; 24
 324:	4b c0       	rjmp	.+150    	; 0x3bc <drive+0x268>
		}
		if (level > 0)
 326:	12 16       	cp	r1, r18
 328:	13 06       	cpc	r1, r19
 32a:	94 f4       	brge	.+36     	; 0x350 <drive+0x1fc>
		{
			
			OCR0=abs(Y);
 32c:	ab 01       	movw	r20, r22
 32e:	77 23       	and	r23, r23
 330:	24 f4       	brge	.+8      	; 0x33a <drive+0x1e6>
 332:	44 27       	eor	r20, r20
 334:	55 27       	eor	r21, r21
 336:	46 1b       	sub	r20, r22
 338:	57 0b       	sbc	r21, r23
 33a:	4c bf       	out	0x3c, r20	; 60
			OCR2=abs(X-Y);
 33c:	a9 01       	movw	r20, r18
 33e:	33 23       	and	r19, r19
 340:	24 f4       	brge	.+8      	; 0x34a <drive+0x1f6>
 342:	44 27       	eor	r20, r20
 344:	55 27       	eor	r21, r21
 346:	42 1b       	sub	r20, r18
 348:	53 0b       	sbc	r21, r19
 34a:	43 bd       	out	0x23, r20	; 35
			PORTB=(1<<PINB0)|(1<<PINB1);
 34c:	43 e0       	ldi	r20, 0x03	; 3
 34e:	48 bb       	out	0x18, r20	; 24
		}
		if (level < 0)
 350:	33 23       	and	r19, r19
 352:	a4 f5       	brge	.+104    	; 0x3bc <drive+0x268>
		{
			OCR0=abs(X);
 354:	ac 01       	movw	r20, r24
 356:	99 23       	and	r25, r25
 358:	24 f4       	brge	.+8      	; 0x362 <drive+0x20e>
 35a:	44 27       	eor	r20, r20
 35c:	55 27       	eor	r21, r21
 35e:	48 1b       	sub	r20, r24
 360:	59 0b       	sbc	r21, r25
 362:	4c bf       	out	0x3c, r20	; 60
			OCR2=abs(X-Y);
 364:	c9 01       	movw	r24, r18
 366:	99 23       	and	r25, r25
 368:	24 f4       	brge	.+8      	; 0x372 <drive+0x21e>
 36a:	88 27       	eor	r24, r24
 36c:	99 27       	eor	r25, r25
 36e:	82 1b       	sub	r24, r18
 370:	93 0b       	sbc	r25, r19
 372:	83 bd       	out	0x23, r24	; 35
			PORTB=(1<<PINB0)|(0<<PINB1);
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	88 bb       	out	0x18, r24	; 24
 378:	21 c0       	rjmp	.+66     	; 0x3bc <drive+0x268>
	if(abs(Y)<=30)
	{
		Y=0;
	}
	
	if (X >= 0 && Y >= 0)          // First quadrant
 37a:	99 23       	and	r25, r25
 37c:	0c f0       	brlt	.+2      	; 0x380 <drive+0x22c>
 37e:	ff ce       	rjmp	.-514    	; 0x17e <drive+0x2a>
	{
		X=0;
	}
	if(abs(Y)<=30)
	{
		Y=0;
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	3c cf       	rjmp	.-392    	; 0x1fe <drive+0xaa>
			OCR2=abs(X-Y);
			PORTB=(0<<PINB0)|(0<<PINB1);
		}
	}
	
	if (X <= 0 && Y >= 0) // Second Quad
 386:	18 16       	cp	r1, r24
 388:	19 06       	cpc	r1, r25
 38a:	0c f4       	brge	.+2      	; 0x38e <drive+0x23a>
 38c:	77 cf       	rjmp	.-274    	; 0x27c <drive+0x128>
 38e:	3a cf       	rjmp	.-396    	; 0x204 <drive+0xb0>
			PORTB=(1<<PINB0)|(0<<PINB1);
		}
	}
	
	
	if (X >= 0 && Y <= 0) // Fourth quad
 390:	99 23       	and	r25, r25
 392:	0c f0       	brlt	.+2      	; 0x396 <drive+0x242>
 394:	77 cf       	rjmp	.-274    	; 0x284 <drive+0x130>
 396:	b7 cf       	rjmp	.-146    	; 0x306 <drive+0x1b2>
			PORTB=(1<<PINB0)|(1<<PINB1);
		}
	}
	
	
	if (X <= 0 && Y <=0) // Third quad
 398:	18 16       	cp	r1, r24
 39a:	19 06       	cpc	r1, r25
 39c:	0c f0       	brlt	.+2      	; 0x3a0 <drive+0x24c>
 39e:	b3 cf       	rjmp	.-154    	; 0x306 <drive+0x1b2>
 3a0:	0d c0       	rjmp	.+26     	; 0x3bc <drive+0x268>
	
	if(abs(X)<=30)
	{
		X=0;
	}
	if(abs(Y)<=30)
 3a2:	cb 01       	movw	r24, r22
 3a4:	4e 96       	adiw	r24, 0x1e	; 30
 3a6:	cd 97       	sbiw	r24, 0x3d	; 61
 3a8:	08 f4       	brcc	.+2      	; 0x3ac <drive+0x258>
 3aa:	ec ce       	rjmp	.-552    	; 0x184 <drive+0x30>
int drive(int X,int Y)
{
	
	if(abs(X)<=30)
	{
		X=0;
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	df ce       	rjmp	.-578    	; 0x170 <drive+0x1c>
			OCR2=abs(X-Y);
			PORTB=(0<<PINB0)|(0<<PINB1);
		}
	}
	
	if (X <= 0 && Y >= 0) // Second Quad
 3b2:	18 16       	cp	r1, r24
 3b4:	19 06       	cpc	r1, r25
 3b6:	0c f4       	brge	.+2      	; 0x3ba <drive+0x266>
 3b8:	61 cf       	rjmp	.-318    	; 0x27c <drive+0x128>
 3ba:	64 cf       	rjmp	.-312    	; 0x284 <drive+0x130>
			PORTB=(1<<PINB0)|(0<<PINB1);
			
		}
	}
	return 0;
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	08 95       	ret

000003c2 <main>:



int main(void)
{
    DDRB|= (1<<PINB3);
 3c2:	bb 9a       	sbi	0x17, 3	; 23
	DDRD|=(1<<PIND7);
 3c4:	8f 9a       	sbi	0x11, 7	; 17
	DDRB|=(1<<PINB0);
 3c6:	b8 9a       	sbi	0x17, 0	; 23
	DDRB|=(1<<PINB1);
 3c8:	b9 9a       	sbi	0x17, 1	; 23
	
	TCCR0|= (1<<WGM00)| (1<<WGM01)|(1<<COM01)|(1<<CS00) ; // PWM setting for pinb3, timer 0 
 3ca:	83 b7       	in	r24, 0x33	; 51
 3cc:	89 66       	ori	r24, 0x69	; 105
 3ce:	83 bf       	out	0x33, r24	; 51
	TCCR2|= (1<<WGM20)|(1<<WGM21) | (1<<COM21)| (1<<CS20) ; // PWM setting for pind7 time
 3d0:	85 b5       	in	r24, 0x25	; 37
 3d2:	89 66       	ori	r24, 0x69	; 105
 3d4:	85 bd       	out	0x25, r24	; 37
	ADC_begin();
 3d6:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_begin>
	sei();
 3da:	78 94       	sei
	
	while(1)
{   
	

	ADC_initialise();
 3dc:	0e 94 43 00 	call	0x86	; 0x86 <ADC_initialise>
	X= joyval1;
 3e0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <joyval1>
 3e4:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <joyval1+0x1>
 3e8:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <X+0x1>
 3ec:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <X>
	
	ADC_initialise();
 3f0:	0e 94 43 00 	call	0x86	; 0x86 <ADC_initialise>
	Y= joyval2;
 3f4:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <joyval2>
 3f8:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <joyval2+0x1>
 3fc:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <Y+0x1>
 400:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <Y>
	
	drive(X,Y);
 404:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <X>
 408:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <X+0x1>
 40c:	0e 94 aa 00 	call	0x154	; 0x154 <drive>
 410:	e5 cf       	rjmp	.-54     	; 0x3dc <main+0x1a>

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
